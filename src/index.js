"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const actor_1 = require("bdsx/bds/actor");
const blockpos_1 = require("bdsx/bds/blockpos");
const command_1 = require("bdsx/bds/command");
const command_2 = require("bdsx/command");
const nativetype_1 = require("bdsx/nativetype");
const __1 = require("..");
const form_1 = require("./form");
const message_1 = require("./utils/message");
/**HomeUI */
command_2.command.register("homeui", "Open home-ui menu.")
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    form_1.HomeForm.menu(pl);
}, {});
/**AddHome */
command_2.command.register("addhome", "Create a new home position.")
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    form_1.HomeForm.add(pl);
}, {})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    __1.HomeMain.createHome(pl, p.name, blockpos_1.BlockPos.create(pl.getPosition()), pl.getDimensionId())
        .then((home) => {
        message_1.send.success(`Create §8[§r${home.name}§r, §7[§rx: ${home.pos.x}, y: ${home.pos.y}, z: ${home.pos.z}§7]§r ${actor_1.DimensionId[home.dimension]}§8]`, pl);
    })
        .catch((err) => {
        if (err)
            message_1.send.error(err, pl);
    });
}, {
    name: nativetype_1.CxxString
})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    let pos = blockpos_1.BlockPos.create(p.pos.getPosition(o));
    __1.HomeMain.createHome(pl, p.name, pos, pl.getDimensionId())
        .then((home) => {
        message_1.send.success(`Create §8[§r${home.name}§r, §7[§rx: ${home.pos.x}, y: ${home.pos.y}, z: ${home.pos.z}§7]§r ${actor_1.DimensionId[home.dimension]}§8]`, pl);
    })
        .catch((err) => {
        if (err)
            message_1.send.error(err, pl);
    });
    ;
}, {
    name: nativetype_1.CxxString,
    pos: command_1.CommandPosition
})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    let pos = blockpos_1.BlockPos.create(p.pos.getPosition(o));
    __1.HomeMain.createHome(pl, p.name, pos, p.dimension)
        .then((home) => {
        message_1.send.success(`Create §8[§r${home.name}§r, §7[§rx: ${home.pos.x}, y: ${home.pos.y}, z: ${home.pos.z}§7]§r ${actor_1.DimensionId[home.dimension]}§8]`, pl);
    })
        .catch((err) => {
        if (err)
            message_1.send.error(err, pl);
    });
    ;
}, {
    name: nativetype_1.CxxString,
    pos: command_1.CommandPosition,
    dimension: command_2.command.enum("DimensionId", actor_1.DimensionId)
});
/**SetHome */
command_2.command.register("sethome", "Create a new home position.")
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    __1.HomeMain.setHome(pl, p.name, blockpos_1.BlockPos.create(pl.getPosition()), pl.getDimensionId())
        .then((home) => {
        message_1.send.success(`Set §8[§r${home.name}§r, §7[§rx: ${home.pos.x}, y: ${home.pos.y}, z: ${home.pos.z}§7]§r ${actor_1.DimensionId[home.dimension]}§8]`, pl);
    })
        .catch((err) => {
        if (err)
            message_1.send.error(err, pl);
    });
}, {
    name: nativetype_1.CxxString
})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    let pos = blockpos_1.BlockPos.create(p.pos.getPosition(o));
    __1.HomeMain.setHome(pl, p.name, pos, pl.getDimensionId())
        .then((home) => {
        message_1.send.success(`Set §8[§r${home.name}§r, §7[§rx: ${home.pos.x}, y: ${home.pos.y}, z: ${home.pos.z}§7]§r ${actor_1.DimensionId[home.dimension]}§8]`, pl);
    })
        .catch((err) => {
        if (err)
            message_1.send.error(err, pl);
    });
}, {
    name: nativetype_1.CxxString,
    pos: command_1.CommandPosition
})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    let pos = blockpos_1.BlockPos.create(p.pos.getPosition(o));
    __1.HomeMain.setHome(pl, p.name, pos, p.dimension)
        .then((home) => {
        message_1.send.success(`Set §8[§r${home.name}§r, §7[§rx: ${home.pos.x}, y: ${home.pos.y}, z: ${home.pos.z}§7]§r ${actor_1.DimensionId[home.dimension]}§8]`, pl);
    })
        .catch((err) => {
        if (err)
            message_1.send.error(err, pl);
    });
}, {
    name: nativetype_1.CxxString,
    pos: command_1.CommandPosition,
    dimension: command_2.command.enum("DimensionId", actor_1.DimensionId)
});
/**RemoveHome */
command_2.command.register("removehome", "Delete your home position.")
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    form_1.HomeForm.remove(pl);
}, {})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    __1.HomeMain.deleteHome(pl, p.name)
        .then((home) => {
        message_1.send.success(`Delete §8[§r${home.name}§r, §7[§rx: ${home.pos.x}, y: ${home.pos.y}, z: ${home.pos.z}§7]§r ${actor_1.DimensionId[home.dimension]}§8]`, pl);
    })
        .catch((err) => {
        if (err)
            message_1.send.error(err, pl);
    });
}, {
    name: nativetype_1.CxxString
});
/**Home */
command_2.command.register("home", "Teleport to your home position.")
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    form_1.HomeForm.teleport(pl);
}, {})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    __1.HomeMain.teleport(pl, p.name);
}, {
    name: nativetype_1.CxxString
});
/**ListHome */
command_2.command.register("listhome", "Check your homes.")
    .overload((p, o) => {
    var _a;
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    pl.sendMessage(`§aHomes: §r${((_a = __1.HomeMain.getHomesName(pl)) !== null && _a !== void 0 ? _a : []).toString().replace(/,/g, "§r§a, §r")}`);
}, {});
/**SetHomesLimit */
command_2.command.register("sethomeslimit", "Change limit player homes.", command_1.CommandPermissionLevel.Operator)
    .overload((p, o) => {
    var _a, _b;
    const pl = (_b = (_a = o.getEntity()) === null || _a === void 0 ? void 0 : _a.getNetworkIdentifier().getActor()) !== null && _b !== void 0 ? _b : undefined;
    __1.HomeMain.setDefaultLimit(p.maximum)
        .then(() => {
        message_1.send.success(`Set §r${p.maximum}§a as default homes limit`, pl);
    })
        .catch((err) => {
        if (err)
            message_1.send.error(err, pl);
    });
}, {
    normal: command_2.command.enum("set_normal", "normal"),
    maximum: nativetype_1.int32_t
})
    .overload((p, o) => {
    var _a, _b;
    const pl = (_b = (_a = o.getEntity()) === null || _a === void 0 ? void 0 : _a.getNetworkIdentifier().getActor()) !== null && _b !== void 0 ? _b : undefined;
    for (const target of p.target.newResults(o)) {
        __1.HomeMain.setHomesLimit(target, p.maximum)
            .then(() => {
            message_1.send.success(`Set §r${p.maximum}§a as §r${target.getName()}§a homes limit`, pl);
        })
            .catch((err) => {
            if (err)
                message_1.send.error(err, pl);
        });
    }
}, {
    player: command_2.command.enum("set_player", "player"),
    target: command_1.PlayerCommandSelector,
    maximum: nativetype_1.int32_t
});
//# sourceMappingURL=data:application/json;base64,