"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const actor_1 = require("bdsx/bds/actor");
const blockpos_1 = require("bdsx/bds/blockpos");
const command_1 = require("bdsx/bds/command");
const command_2 = require("bdsx/command");
const nativetype_1 = require("bdsx/nativetype");
const _1 = require(".");
const __1 = require("..");
const form_1 = require("./form");
const message_1 = require("./utils/message");
command_2.command.register("homeui", "Open home-ui menu.")
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    form_1.HomeForm.menu(pl);
}, {});
command_2.command.register("addhome", "Create a new home position.")
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    form_1.HomeForm.add(pl);
}, {})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    __1.HomeMain.createHome(pl, p.name, pl.getPosition(), pl.getDimensionId());
}, {
    name: nativetype_1.CxxString
})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    let pos = blockpos_1.Vec3.create(p.pos);
    if (p.pos.local)
        pos.set(pl.getPosition());
    __1.HomeMain.createHome(pl, p.name, pos, pl.getDimensionId());
}, {
    name: nativetype_1.CxxString,
    pos: command_1.CommandPosition
})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    let pos = blockpos_1.Vec3.create(p.pos);
    if (p.pos.local)
        pos.set(pl.getPosition());
    __1.HomeMain.createHome(pl, p.name, pos, p.dimension);
}, {
    name: nativetype_1.CxxString,
    pos: command_1.CommandPosition,
    dimension: command_2.command.enum("DimensionId", actor_1.DimensionId)
});
command_2.command.register("sethome", "Create a new home position.")
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    form_1.HomeForm.add(pl);
}, {})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    __1.HomeMain.createHome(pl, p.name, pl.getPosition(), pl.getDimensionId());
}, {
    name: nativetype_1.CxxString
})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    let pos = blockpos_1.Vec3.create(p.pos);
    if (p.pos.local)
        pos.set(pl.getPosition());
    __1.HomeMain.createHome(pl, p.name, pos, pl.getDimensionId());
}, {
    name: nativetype_1.CxxString,
    pos: command_1.CommandPosition
})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    let pos = blockpos_1.Vec3.create(p.pos);
    if (p.pos.local)
        pos.set(pl.getPosition());
    __1.HomeMain.createHome(pl, p.name, pos, p.dimension);
}, {
    name: nativetype_1.CxxString,
    pos: command_1.CommandPosition,
    dimension: command_2.command.enum("DimensionId", actor_1.DimensionId)
});
command_2.command.register("removehome", "Delete your home position.")
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    form_1.HomeForm.remove(pl);
}, {})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    __1.HomeMain.deleteHome(pl, p.name);
}, {
    name: nativetype_1.CxxString
});
command_2.command.register("home", "Teleport to your home position.")
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    form_1.HomeForm.teleport(pl);
}, {})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    __1.HomeMain.teleport(pl, p.name);
}, {
    name: nativetype_1.CxxString
});
command_2.command.register("listhome", "Check your homes.")
    .overload((p, o) => {
    var _a;
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    pl.sendMessage(`§aHomes: §r${((_a = __1.HomeMain.getHomesName(pl)) !== null && _a !== void 0 ? _a : []).toString().replace(/,/g, "§r§a, §r")}`);
}, {});
command_2.command.register("setmaxhomes", "Change limit player homes.", command_1.CommandPermissionLevel.Operator)
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        _1.PlayerHomeLimite.setNormalHomeLimits(p.maximum, true);
        return;
    }
    if (!pl.isPlayer())
        return;
    _1.PlayerHomeLimite.setNormalHomeLimits(p.maximum, true, pl);
}, {
    normal: command_2.command.enum("set_normal", "normal"),
    maximum: nativetype_1.int32_t
})
    .overload((p, o) => {
    const pl = o.getEntity();
    if (!pl) {
        message_1.send.error(`This command not for console`);
        return;
    }
    if (!pl.isPlayer())
        return;
    for (const target of p.target.newResults(o)) {
        if (target.isPlayer()) {
            _1.PlayerHomeLimite.setHomeLimits(target, p.maximum);
        }
    }
    _1.PlayerHomeLimite.setHomeLimits(pl, p.maximum);
}, {
    player: command_2.command.enum("set_player", "player"),
    target: command_1.PlayerCommandSelector,
    maximum: nativetype_1.int32_t
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21tYW5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBDQUE2QztBQUM3QyxnREFBeUM7QUFDekMsOENBQWtHO0FBQ2xHLDBDQUF1QztBQUN2QyxnREFBcUQ7QUFDckQsd0JBQXFDO0FBQ3JDLDBCQUE4QjtBQUM5QixpQ0FBa0M7QUFDbEMsNkNBQXVDO0FBRXZDLGlCQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQztLQUMvQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDZixNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDekIsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNMLGNBQUksQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUMzQyxPQUFPO0tBQ1Y7SUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUFFLE9BQU87SUFFM0IsZUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0QixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFUCxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsNkJBQTZCLENBQUM7S0FDekQsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ2YsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3pCLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDTCxjQUFJLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDM0MsT0FBTztLQUNWO0lBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFBRSxPQUFPO0lBRTNCLGVBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckIsQ0FBQyxFQUFFLEVBQUUsQ0FBQztLQUNMLFFB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